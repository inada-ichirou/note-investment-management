# このパイプラインは手動実行とcronスケジュールで autoCreateAndDraftNote.js を自動実行します
# cronスケジュールは JST 11:45, 17:45, 23:45（UTC換算で2:45, 8:45, 14:45）
# GitLabでは1つのスケジュールに1つのCron式のみ設定可能
# 複数時刻で実行する場合は、以下のような1日3回のCron式も使用可能：
# 45 2,8,14 * * * (JST 11:45, 17:45, 23:45に相当)

stages:
  # - debug
  - note-tasks

variables:
  NODE_VERSION: "20"

# 共通テンプレート（Puppeteerを使用するジョブ用）
.note-job-template:
  image: node:${NODE_VERSION}-bullseye

  # キャッシュ設定（npm installを高速化）
  cache:
    paths:
      - node_modules/

  before_script:
    - apt-get update
    - apt-get install -y wget gnupg ca-certificates
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    - apt-get update
    - apt-get install -y google-chrome-stable libnss3 libxss1 libasound2 libatk-bridge2.0-0 libgtk-3-0 libx11-xcb1 fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf
    - rm -rf /var/lib/apt/lists/*

    # 依存パッケージのインストール
    - echo "依存パッケージをインストール中..."
    - npm ci

    # 環境変数の設定（GitLabのCI/CD変数から取得）
    - echo "環境変数を設定中..."
    - export OPENROUTER_API_KEY="${OPENROUTER_API_KEY}"
    - export NOTE_EMAIL="${NOTE_EMAIL}"
    - export NOTE_PASSWORD="${NOTE_PASSWORD}"
    - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    - export PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable

  # エラー時のアーティファクト保存（ログなど）
  artifacts:
    when: on_failure
    paths:
      - "*.log"
    expire_in: 1 week

  # タイムアウト設定（10分）
  timeout: 10m

# デバッグ用ジョブ（スケジュール実行時の変数を確認）
# debug-schedule:
#   stage: debug
#   image: alpine:latest
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "schedule"'
#   script:
#     - echo "=== スケジュール実行デバッグ情報 ==="
#     - echo "CI_PIPELINE_SOURCE':' $CI_PIPELINE_SOURCE"
#     - echo "SCHEDULE_TYPE':' $SCHEDULE_TYPE"
#     - echo "CI_COMMIT_REF_NAME':' $CI_COMMIT_REF_NAME"
#     - echo "CI_PIPELINE_ID':' $CI_PIPELINE_ID"
#     - echo "=================================="


# ーー定期実行ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

# 記事作成・下書き保存ジョブ
auto-create-and-draft-note:
  extends: .note-job-template
  stage: note-tasks

  # 実行条件：スケジュール実行（RUN_CREATE_DRAFT）または手動実行
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_CREATE_DRAFT == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true

  script:
    - echo "autoCreateAndDraftNote.js を実行中..."
    - node autoCreateAndDraftNote.js

# 記事自動公開ジョブ
auto-publish-notes:
  extends: .note-job-template
  stage: note-tasks

  # 実行条件：スケジュール実行（RUN_PUBLISH_NOTES）または手動実行
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_PUBLISH_NOTES == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true

  script:
    - echo "autoPublishNotes.js を実行中..."
    - node autoPublishNotes.js


# 記事いいね機能ジョブ
like-notes:
  extends: .note-job-template
  stage: note-tasks

  # 実行条件：スケジュール実行（RUN_LIKE_NOTES）または手動実行
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_LIKE_NOTES == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true

  script:
    - echo "likeUnlikedNotes.js を実行中..."
    - node likeUnlikedNotes.js

# 記事からフォロー機能ジョブ
follow-from-articles:
  extends: .note-job-template
  stage: note-tasks

  # 実行条件：スケジュール実行（RUN_FOLLOW_FROM_ARTICLES）または手動実行
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_FOLLOW_FROM_ARTICLES == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true

  script:
    - echo "follow/followFromArticles.js を実行中..."
    - node follow/followFromArticles.js

# ーー定期実行ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


# 手動実行専用ジョブ（必要に応じて）
manual-create-and-draft-note:
  extends: .note-job-template
  stage: note-tasks
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true
  script:
    - echo "手動実行中..."
    - node autoCreateAndDraftNote.js
